generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chat {
  id           Int           @id @default(autoincrement())
  message_id   String        @unique @db.VarChar(30)
  discord_id   String        @db.VarChar(20)
  username     String?       @db.VarChar(100)
  content      String?
  content_type String?       @default("text") @db.VarChar(20)
  attachments  String[]
  channel_id   String?       @db.VarChar(30)
  guild_id     String?       @db.VarChar(30)
  created_at   DateTime?     @default(now()) @db.Timestamp(6)
  updated_at   DateTime?     @default(now()) @db.Timestamp(6)
  deleted_at   DateTime?     @db.Timestamp(6)
  chat_history chat_history?

  @@index([channel_id], map: "idx_chat_channel_id")
  @@index([discord_id], map: "idx_chat_discord_id")
  @@index([message_id], map: "idx_chat_message_id")
}

model chat_history {
  id              Int       @id @default(autoincrement())
  messageid       String    @unique @db.VarChar(30)
  old_content     String?
  new_content     String?
  old_attachments String[]
  new_attachments String[]
  edited_at       DateTime? @default(now()) @db.Timestamptz(6)
  chat            chat      @relation(fields: [messageid], references: [message_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([messageid], map: "idx_chat_history_messageid")
}

model moderators {
  id                 Int       @id @default(autoincrement())
  discord_id         String    @unique @db.VarChar(20)
  username           String    @db.VarChar(50)
  locale             String?   @db.VarChar(10)
  email              String?   @db.VarChar(100)
  registration_token String?   @unique @db.VarChar(100)
  created_at         DateTime? @default(now()) @db.Timestamp(6)
  updated_at         DateTime? @default(now()) @db.Timestamp(6)

  @@index([discord_id], map: "idx_moderators_discord_id")
  @@index([registration_token], map: "idx_moderators_registration_token")
}

model tickets {
  id          Int              @id @default(autoincrement())
  ticket_id   String           @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  author_id   String           @db.VarChar(20)
  target_id   String?          @db.VarChar(20)
  assignee_id String?          @db.VarChar(20)
  status      ticket_status?   @default(open)
  category    ticket_category?
  subject     String?
  description String?
  channel_id  String?          @db.VarChar(30)
  guild_id    String?          @db.VarChar(30)
  is_closed   Boolean?         @default(false)
  created_at  DateTime?        @default(now()) @db.Timestamp(6)
  updated_at  DateTime?        @default(now()) @db.Timestamp(6)
  closed_at   DateTime?        @db.Timestamp(6)
  deleted_at  DateTime?        @db.Timestamp(6)

  @@index([assignee_id], map: "idx_tickets_assignee_id")
  @@index([author_id], map: "idx_tickets_author_id")
  @@index([channel_id], map: "idx_tickets_channel_id")
  @@index([status], map: "idx_tickets_status")
  @@index([target_id], map: "idx_tickets_target_id")
}

enum ticket_category {
  support
  report
  appeal
}

enum ticket_status {
  open
  pending
  closed
}
